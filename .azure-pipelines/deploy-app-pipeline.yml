# Azure Pipeline
# Run the pipeline to build and push docker image
# On successful build and push, deploy the image to web app
trigger:
  branches:
    include:
      - main
  paths:
    include:
      # Run the pipeline when changes are made to the app folder and Dockerfile
      - app/*
      - Dockerfile


pool:
  vmImage: 'ubuntu-latest'

variables:
  # Container registry service connection established during pipeline creation
  imageRepository: $(IMAGE_REPO)
  containerRegistry: $(AZURE_ACR_REPO)
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  acrServiceConnection: $(ACR_SERVICE_CONNECTION)
  azureServiceConnection: $(AZURE_SERVICE_CONNECTION)
  webAppName: $(WEB_APP_NAME)
  azureFunctionName: $(AZURE_FUNCTION_NAME)


stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(acrServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'
      
- stage: Deploy
  displayName: Deploying application
  dependsOn: Build # Run Deploy stage only after Build stage is run
  condition: succeeded() # Run only if Build stage is successful
  jobs:
      # Deploy the SSL Monitor Dashboard Web Application
    - job: DeployWebApp
      displayName: Deploy Web Application
      steps:
        - task: AzureRmWebAppDeployment@5
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: '$(azureServiceConnection)'
            appType: 'webAppContainer'
            WebAppName: '$(webAppName)'
            DockerNamespace: '$(containerRegistry)'
            DockerRepository: '$(imageRepository)'
            DockerImageTag: '$(tag)'

      # Deploy the Update Domain Azure Function
    - job: DeployFunction
      displayName: Deploy Azure Function
      steps:
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(workingDirectory)/update_domain_function/'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'functionApp'
            publishLocation: 'Container'
        - task: AzureFunctionApp@2
          inputs:
            connectedServiceNameARM: '$(azureServiceConnection)'
            appType: 'functionAppLinux'
            isFlexConsumption: true
            appName: '$(azureFunctionName)'
            package: '$(System.DefaultWorkingDirectory)/**/*.zip'